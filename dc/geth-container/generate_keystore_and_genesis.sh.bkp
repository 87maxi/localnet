#!/usr/bin/env bash
set -euo pipefail

# ----------------------------
# Configuración inicial
# ----------------------------
DATADIR="./data/erigon"
KEYSTORE="$DATADIR/keystore"
PASSFILE="./password.txt"
GENESIS_FILE="$DATADIR/genesis.json"
ETHERBASE=""
ACCOUNTS=()

mkdir -p "$KEYSTORE"

# ----------------------------
# Password por defecto si no existe
# ----------------------------
if [ ! -f "$PASSFILE" ]; then
  echo "password" > "$PASSFILE"
  chmod 600 "$PASSFILE"
  echo "⚠️ Password file creado con valor 'password'. Cámbialo si lo necesitas."
fi

# ----------------------------
# Helper para extraer addresses de keystore
# ----------------------------
extract_address_from_file() {
  local file="$1"
  basename "$file" | awk -F'--' '{print $NF}' | tr '[:upper:]' '[:lower:]'
}

# ----------------------------
# Crear cuentas nuevas
# ----------------------------
create_accounts() {
  local n="$1"
  echo "🔐 Creando $n cuentas en $KEYSTORE ..."
  for i in $(seq 1 "$n"); do
    out=$(geth account new --datadir "$DATADIR" --password "$PASSFILE" 2>&1)
    addr=$(echo "$out" | grep -oE "0x[a-fA-F0-9]{40}" | head -n1 | tr '[:upper:]' '[:lower:]')
    echo "  ✅ $addr"
  done
}

# ----------------------------
# Importar claves privadas desde archivo
# ----------------------------
import_keys() {
  local keysfile="$1"
  echo "🔐 Importando claves de $keysfile ..."
  while IFS= read -r key || [ -n "$key" ]; do
    key=$(echo "$key" | tr -d '[:space:]' | sed 's/^0x//I')
    [ -z "$key" ] && continue
    tmp=$(mktemp)
    echo "$key" > "$tmp"
    geth account import --datadir "$DATADIR" --password "$PASSFILE" "$tmp"
    rm -f "$tmp"
    echo "  ✅ $key importada"
  done < "$keysfile"
}

generate_genesis() {
  # Recolectar todas las cuentas del keystore
  ACCOUNTS=()
  for f in "$KEYSTORE"/UTC*; do
    [ -f "$f" ] || continue
    ACCOUNTS+=("$(extract_address_from_file "$f")")
  done

  if [ ${#ACCOUNTS[@]} -eq 0 ]; then
    echo "❌ No hay cuentas en el keystore para usar como signers."
    exit 1
  fi

  # Crear balances iniciales
  ALLOC="{"
  for a in "${ACCOUNTS[@]}"; do
    ALLOC+="\"$a\":{\"balance\":\"0x1337000000000000000000\"},"
  done
  ALLOC="${ALLOC%,}}"

  # Generar el archivo de génesis
  cat > "$GENESIS_FILE" <<EOF
{
  "config": {
    "chainId": 1337,
    "homesteadBlock": 0,
    "eip150Block": 0,
    "eip155Block": 0,
    "eip158Block": 0,
    "byzantiumBlock": 0,
    "constantinopleBlock": 0,
    "petersburgBlock": 0,
    "istanbulBlock": 0,
    "berlinBlock": 0,
    "londonBlock": 0,
    "terminalTotalDifficulty": 0,
    "clique": {
      "period": 2,
      "epoch": 30000
    }
  },
  "nonce": "0x0",
  "timestamp": "0x5f7a1b2c",
  "extraData": "0x$(printf '0%.0s' {1..64})$(printf '%s' "${ACCOUNTS[@]}")00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  "gasLimit": "0x8000000",
  "difficulty": "0x1",
  "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "coinbase": "0x0000000000000000000000000000000000000000",
  "alloc": $ALLOC
}
EOF
  echo "✅ Genesis.json generado en $GENESIS_FILE"
}
# ----------------------------
# Elegir etherbase
# ----------------------------
choose_etherbase() {
  ETHERBASE="0x${ACCOUNTS[0]}"
  echo "⛏️ Minando con etherbase: $ETHERBASE"
}

# ----------------------------
# Main
# ----------------------------
if [ $# -lt 1 ]; then
  echo "Uso: $0 [new N | import FILE]"
  exit 1
fi

#MODE="$1"; shift

case "$MODE" in
  new)
    N="$1"
    create_accounts "$N"
    ;;
  import)
    FILE="$1"
    import_keys "$FILE"
    ;;
  *)
    echo "Modo desconocido: $MODE"
    exit 1
    ;;
esac

#generate_genesis
#choose_etherbase


