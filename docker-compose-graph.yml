version: '3.8'

networks:
  eth-net:
    driver: bridge

volumes:
  geth-data:
  postgres-data:
  redis-data:
  blockscout-logs:
  verifier-data:
  # Volúmenes para The Graph
  graph-node-postgres:
  graph-node-ipfs:

services:
  # =============== TU ENTORNO EXISTENTE ===============
  # Geth localnet con modo debug
  geth:
    image: ethereum/client-go:v1.13.15
    container_name: geth
    command:
      - --datadir=/data/geth
      - --http
      - --http.addr=0.0.0.0
      - --http.port=8545
      - --http.api=eth,net,web3,debug,txpool,trace,admin,personal
      - --http.corsdomain=*
      - --http.vhosts=*
      - --ws
      - --ws.addr=0.0.0.0
      - --ws.port=8546
      - --ws.api=eth,net,web3,debug,txpool,trace,admin,personal
      - --ws.origins=*
      - --networkid=1337
      - --nodiscover
      - --unlock=0x43a57AB8c83898920214D0fefD1539a463a9279e
      - --password=/data/geth/password.txt
      - --allow-insecure-unlock
      - --mine
    ports:
      - "8545:8545"    # HTTP RPC
      - "8546:8546"    # WebSocket
      - "30303:30303"  # P2P
    volumes:
      - ./dc/geth:/data/geth
      - geth-data:/root/.ethereum
    networks:
      - eth-net
    restart: unless-stopped

  # PostgreSQL para Blockscout
  blockscout-db:
    image: postgres:14
    container_name: blockscout-db
    environment:
      POSTGRES_USER: blockscout
      POSTGRES_PASSWORD: blockscout_pass
      POSTGRES_DB: blockscout
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U blockscout"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - eth-net

  # Redis para cache
  redis:
    image: redis:7-alpine
    container_name: blockscout-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - eth-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Blockscout Backend
  blockscout-backend:
    image: blockscout/blockscout:latest
    container_name: blockscout-backend
    depends_on:
      blockscout-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "bin/blockscout eval 'Elixir.Explorer.ReleaseTasks.create_and_migrate()' && bin/blockscout start"
    environment:
      DATABASE_URL: postgresql://blockscout:blockscout_pass@blockscout-db:5432/blockscout?ssl=false
      ECTO_USE_SSL: "false"
      DATABASE_AUTO_MIGRATE: "true"
      ETHEREUM_JSONRPC_VARIANT: geth
      ETHEREUM_JSONRPC_HTTP_URL: http://geth:8545
      ETHEREUM_JSONRPC_WS_URL: ws://geth:8546
      ETHEREUM_JSONRPC_TRACE_URL: http://geth:8545
      NETWORK: Development
      SUBNETWORK: Geth Localnet
      CHAIN_ID: "1337"
      COIN: ETH
      BLOCKSCOUT_HOST: 127.0.0.1
      BLOCKSCOUT_PROTOCOL: http
      SECRET_KEY_BASE: 56NtB48ear7+wMSf0IQuWDAAazhpb31qyc7GiyspBP2vh7t5zlCsF5QDv76chXeN
      PORT: "4000"
      INDEXER_DISABLE_PENDING_TRANSACTIONS_FETCHER: "false"
      INDEXER_DISABLE_INTERNAL_TRANSACTIONS_FETCHER: "false"
      FETCH_REWARDS_WAY: trace_block
      TRACE_FIRST_BLOCK: "0"
      TRACE_LAST_BLOCK: latest
      REDIS_URL: redis://redis:6379
      API_V2_ENABLED: "true"
      DISABLE_WEBAPP: "false"
      DISABLE_READ_API: "false"
      DISABLE_WRITE_API: "false"
      DISABLE_INDEXER: "false"
      POOL_SIZE: "20"
      POOL_SIZE_API: "10"
      MIX_ENV: prod
      LOGO: /images/blockscout_logo.svg
      ETHEREUM_JSONRPC_DISABLE_ARCHIVE_BALANCES: "false"
    ports:
      - "4000:4000"
    volumes:
      - blockscout-logs:/app/logs
    networks:
      - eth-net
    restart: unless-stopped

  # Blockscout Frontend
  blockscout-frontend:
    image: ghcr.io/blockscout/frontend:latest
    container_name: blockscout-frontend
    depends_on:
      - blockscout-backend
    platform: linux/amd64
    environment:
      NEXT_PUBLIC_API_HOST: localhost
      NEXT_PUBLIC_API_PORT: "4000"
      NEXT_PUBLIC_API_PROTOCOL: http
      NEXT_PUBLIC_API_WEBSOCKET_PROTOCOL: ws
      NEXT_PUBLIC_STATS_API_HOST: http://localhost:4000
      NEXT_PUBLIC_NETWORK_NAME: Geth Localnet
      NEXT_PUBLIC_NETWORK_SHORT_NAME: Localnet
      NEXT_PUBLIC_NETWORK_ID: "1337"
      NEXT_PUBLIC_NETWORK_CURRENCY_NAME: Ether
      NEXT_PUBLIC_NETWORK_CURRENCY_SYMBOL: ETH
      NEXT_PUBLIC_NETWORK_CURRENCY_DECIMALS: "18"
      NEXT_PUBLIC_API_BASE_PATH: /
      NEXT_PUBLIC_APP_HOST: localhost
      NEXT_PUBLIC_APP_PROTOCOL: http
      NEXT_PUBLIC_HOMEPAGE_CHARTS: "['daily_txs']"
      NEXT_PUBLIC_VISUALIZE_API_HOST: http://blockscout-backend:4000
      NEXT_PUBLIC_IS_ACCOUNT_SUPPORTED: "true"
      NEXT_PUBLIC_AUTH_URL: http://blockscout-backend:4000
      NEXT_PUBLIC_LOGOUT_URL: http://blockscout-backend:4000/auth/logout
    ports:
      - "3000:3000"
    networks:
      - eth-net
    restart: unless-stopped

  # Smart Contract Verifier
  smart-contract-verifier:
    image: ghcr.io/blockscout/smart-contract-verifier:latest
    container_name: blockscout-verifier
    platform: linux/amd64
    environment:
      STATS__BLOCKSCOUT_API_URL: "http://blockscout-backend:4000"
      STATS__DB_URL: "postgresql://blockscout:blockscout_pass@postgres:5432/blockscout?sslmode=disable"
      STATS__BLOCKSCOUT_DB_URL: "postgresql://blockscout:blockscout_pass@postgres:5432/blockscout?sslmode=disable"
      STATS__CREATE_DATABASE: "false"
      STATS__RUN_MIGRATIONS: "true"
      STATS__SERVER__HTTP__ADDR: "0.0.0.0:8052"
      RUST_LOG: info
    ports:
      - "8050:8050"
    volumes:
      - verifier-data:/tmp
    networks:
      - eth-net
    restart: unless-stopped

  # Visualizer service
  visualizer:
    image: ghcr.io/blockscout/visualizer:latest
    container_name: blockscout-visualizer
    platform: linux/amd64
    environment:
      NEXT_PUBLIC_JSON_RPC_URL: http://geth:8545
      NEXT_PUBLIC_WS_URL: ws://geth:8545
      NEXT_PUBLIC_CHAIN_ID: "1337"
      NEXT_PUBLIC_NETWORK_NAME: "Local Geth PoA"
    ports:
      - "8051:3000"
    networks:
      - eth-net
    depends_on:
      - geth
    restart: unless-stopped

  # Stats service
  stats:
    image: ghcr.io/blockscout/stats:latest
    container_name: blockscout-stats
    platform: linux/amd64
    depends_on:
      blockscout-db:
        condition: service_healthy
      blockscout-backend:
        condition: service_started
    environment:
      STATS__BLOCKSCOUT_API_URL: "http://blockscout-backend:4000"
      STATS__DB_URL: "postgresql://blockscout:blockscout_pass@blockscout-db:5432/blockscout?sslmode=disable"
      STATS__BLOCKSCOUT_DB_URL: "postgresql://blockscout:blockscout_pass@blockscout-db:5432/blockscout?sslmode=disable"
      STATS__CREATE_DATABASE: "false"
      STATS__RUN_MIGRATIONS: "true"
      STATS__SERVER__HTTP__ADDR: "0.0.0.0:8052"
      STATS__IGNORE_BLOCKSCOUT_API_ABSENCE: "true"
      RUST_LOG: info
    ports:
      - "8052:8052"
    networks:
      - eth-net
    restart: unless-stopped

  # =============== NUEVO: THE GRAPH ===============
  # PostgreSQL dedicada para The Graph
  graph-db:
    image: postgres:14
    container_name: graph-db
    environment:
      POSTGRES_USER: graph
      POSTGRES_PASSWORD: graph
      POSTGRES_DB: graph
    volumes:
      - graph-node-postgres:/var/lib/postgresql/data
    networks:
      - eth-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U graph"]
      interval: 10s
      timeout: 5s
      retries: 5

  # IPFS para almacenar subgrafos
  ipfs:
    image: ipfs/kubo:latest
    container_name: ipfs
    ports:
      - "5001:5001"  # API
      - "8080:8080"  # Gateway
    volumes:
      - graph-node-ipfs:/data/ipfs
    networks:
      - eth-net

  # Graph Node (indexador)
  graph-node:
    image: graphprotocol/graph-node:latest
    container_name: graph-node
    depends_on:
      graph-db:
        condition: service_healthy
      ipfs:
        condition: service_started
      geth:
        condition: service_started
    ports:
      - "8000:8000"   # GraphQL HTTP
      - "8001:8001"   # GraphQL WebSocket
      - "8020:8020"   # JSON-RPC (admin)
      - "8030:8030"   # Indexing status
      - "8040:8040"   # Metrics
    environment:
      # Conexión a Postgres
      GRAPH_NODE_POSTGRES_URL: postgresql://graph:graph@graph-db:5432/graph
      # Conexión a IPFS
      GRAPH_NODE_IPFS: ipfs:5001
      # Conexión a tu Geth local (¡clave!)
      GRAPH_NODE_ETHEREUM_RPC: localnet:http://geth:8545
      # Chain ID de tu red (debe coincidir con --networkid de Geth)
      GRAPH_NODE_CHAIN_ID: "1337"
      # Modo de sincronización (rápido para localnet)
      GRAPH_NODE_ETH_CALL_BY_NUMBER: "true"
      GRAPH_NODE_DISABLE_BLOCK_INGESTOR: "false"
    networks:
      - eth-net
    restart: unless-stopped


#graph deploy \
#  --node http://localhost:8020/ \
#  --ipfs http://localhost:5001/ \
#  tu-nombre/subgrafo-local
